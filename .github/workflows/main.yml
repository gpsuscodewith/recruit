name: Conditional Test Runner

on:
  push:
    branches-ignore:
      - main
    paths:
      - 'src/**'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
    paths:
      - 'src/**'
  workflow_dispatch:

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch enough to see the last commit before the PR's changes

      - name: Determine Problem and Language
        id: problem-language
        run: |
          echo "Determining changed files..."
          # Determine if it's a pull request or push
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '^src/')
          else
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep '^src/')
          fi
          echo "Changed Files: $CHANGED_FILES"
          
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No src files changed."
            echo "problem=none" >> $GITHUB_ENV
            echo "language=none" >> $GITHUB_ENV
          else
            # Extract the problem name, which is the directory name immediately following the first 'src/'
            PROBLEM=$(echo "$CHANGED_FILES" | grep -o 'src/[^/]*/' | head -1 | cut -d'/' -f2)
            # Extract the language from the path
            LANGUAGE=$(echo "$CHANGED_FILES" | grep -o 'src/[^/]*/[^/]*' | cut -d'/' -f3 | uniq)
      
            # Ensure the LANGUAGE is correctly determined for golang where 'src/' occurs twice in the path
            if [[ "$CHANGED_FILES" == *"/golang/"* ]]; then
              LANGUAGE="golang"
            fi
      
            echo "Detected Problem: $PROBLEM"
            echo "Detected Language: $LANGUAGE"
      
            # Properly format and output the environment variables
            echo "problem=$PROBLEM" >> $GITHUB_ENV
            echo "language=$LANGUAGE" >> $GITHUB_ENV
          fi
        
      - name: Set up .NET Core
        if: env.language == 'csharp' && env.problem != 'none'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.100'

      - name: Set up Go
        if: env.language == 'golang' && env.problem != 'none'
        uses: actions/setup-go@v2
        with:
          go-version: '1.19'

      - name: Set up Java
        if: env.language == 'java' && env.problem != 'none'
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Set up Node.js
        if: env.language == 'node' && env.problem != 'none'
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Set up Python
        if: env.language == 'python' && env.problem != 'none'
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Run .NET Tests
        if: env.language == 'csharp' && env.problem != 'none'
        run: dotnet test src/${{ env.problem }}/csharp/

      - name: Run Go Tests
        if: env.language == 'golang' && env.problem != 'none'
        run: |
          cd src/${{ env.problem }}/golang
          go test ./src/solution -v
      
      - name: Run Java Tests
        if: env.language == 'java' && env.problem != 'none'
        run: mvn -f src/${{ env.problem }}/java/pom.xml test

      - name: Run Node.js Tests
        if: env.language == 'node' && env.problem != 'none'
        working-directory: src/${{ env.problem }}/node/
        run: |
          npm install
          npm test
      
      - name: Run Python Tests
        if: env.language == 'python' && env.problem != 'none'
        run: |
          pip install pytest
          pytest src/${{ env.problem }}/python/
        
